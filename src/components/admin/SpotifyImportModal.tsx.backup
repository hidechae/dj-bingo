import { useState, useEffect, useRef, useCallback } from "react";
import { useSession, signIn } from "next-auth/react";
import { api } from "~/utils/api";
import { SpotifyIcon } from "~/components/common/SpotifyIcon";
import { Modal } from "~/components/ui/Modal";

interface SpotifyImportModalProps {
  isOpen: boolean;
  onImport: (tracks: Array<{ title: string; artist: string }>) => void;
  onClose: () => void;
}

type Track = {
  title: string;
  artist: string;
  album?: string;
};

type TabType = "url" | "playlists" | "search";

type Playlist = {
  id: string;
  name: string;
  description?: string | null;
  trackCount: number;
  imageUrl?: string;
  owner: string;
};

type Album = {
  id: string;
  name: string;
  artist: string;
  imageUrl?: string;
  trackCount: number;
};

type SearchPlaylist = {
  id: string;
  name: string;
  description?: string;
  trackCount: number;
  imageUrl?: string;
  owner: string;
};

export const SpotifyImportModal: React.FC<SpotifyImportModalProps> = ({
  isOpen,
  onImport,
  onClose,
}) => {
  const { data: session } = useSession();
  const [activeTab, setActiveTab] = useState<TabType>("url");
  const [step, setStep] = useState<"input" | "select">("input");
  const [playlistUrl, setPlaylistUrl] = useState("");
  const [error, setError] = useState("");
  const [tracks, setTracks] = useState<Track[]>([]);
  const [selectedIndices, setSelectedIndices] = useState<Set<number>>(
    new Set()
  );
  
  // マイプレイリスト用の状態
  const [playlists, setPlaylists] = useState<Playlist[]>([]);
  const [playlistsOffset, setPlaylistsOffset] = useState(0);
  const [hasMorePlaylists, setHasMorePlaylists] = useState(true);
  const playlistsScrollRef = useRef<HTMLDivElement>(null);
  
  // 検索用の状態
  const [searchQuery, setSearchQuery] = useState("");
  const [searchResults, setSearchResults] = useState<{
    tracks?: Track[];
    albums?: Album[];
    playlists?: SearchPlaylist[];
  }>({});
  const [searchTab, setSearchTab] = useState<"tracks" | "albums" | "playlists">("tracks");
  
  const hasSpotifyAuth = !!session?.accessToken;

  const getPlaylistTracksMutation = api.spotify.getPlaylistTracks.useMutation({
    onSuccess: (data) => {
      setTracks(data.tracks);
      setError("");
      setSelectedIndices(new Set(data.tracks.map((_, i) => i)));
      setStep("select");
    },
    onError: (error) => {
      setError(error.message);
    },
  });

  const getUserPlaylistsQuery = api.spotify.getUserPlaylists.useQuery(
    { limit: 20, offset: playlistsOffset },
    { enabled: isOpen && activeTab === "playlists" && hasSpotifyAuth }
  );

  const getUserPlaylistTracksMutation = api.spotify.getUserPlaylistTracks.useMutation({
    onSuccess: (data) => {
      setTracks(data.tracks);
      setError("");
      setSelectedIndices(new Set(data.tracks.map((_, i) => i)));
      setStep("select");
    },
    onError: (error) => {
      setError(error.message);
    },
  });

  const searchMutation = api.spotify.search.useQuery(
    { query: searchQuery, types: ["track", "album", "playlist"], limit: 20 },
    { enabled: false }
  );

  const getAlbumTracksMutation = api.spotify.getAlbumTracks.useMutation({
    onSuccess: (data) => {
      setTracks(data.tracks);
      setError("");
      setSelectedIndices(new Set(data.tracks.map((_, i) => i)));
      setStep("select");
    },
    onError: (error) => {
      setError(error.message);
    },
  });

  // マイプレイリストのデータ読み込み
  useEffect(() => {
    if (getUserPlaylistsQuery.data) {
      const items = getUserPlaylistsQuery.data.items.map(item => ({
        ...item,
        owner: item.owner ?? "Unknown"
      }));
      if (playlistsOffset === 0) {
        setPlaylists(items);
      } else {
        setPlaylists(prev => [...prev, ...items]);
      }
      setHasMorePlaylists(getUserPlaylistsQuery.data.hasMore);
    }
  }, [getUserPlaylistsQuery.data, playlistsOffset]);

  // 無限スクロール処理
  const handlePlaylistsScroll = useCallback(() => {
    const element = playlistsScrollRef.current;
    if (!element || !hasMorePlaylists || getUserPlaylistsQuery.isFetching) return;

    const { scrollTop, scrollHeight, clientHeight } = element;
    if (scrollHeight - scrollTop <= clientHeight * 1.5) {
      setPlaylistsOffset(prev => prev + 20);
    }
  }, [hasMorePlaylists, getUserPlaylistsQuery.isFetching]);

  // モーダルが閉じられたら状態をリセット
  useEffect(() => {
    if (!isOpen) {
      setActiveTab("url");
      setStep("input");
      setPlaylistUrl("");
      setError("");
      setTracks([]);
      setSelectedIndices(new Set());
      setPlaylists([]);
      setPlaylistsOffset(0);
      setHasMorePlaylists(true);
      setSearchQuery("");
      setSearchResults({});
    }
  }, [isOpen]);

  const handleFetchTracks = (e: React.FormEvent) => {
    e.preventDefault();
    setError("");

    if (!playlistUrl.trim()) {
      setError("プレイリストURLまたはIDを入力してください");
      return;
    }

    getPlaylistTracksMutation.mutate({ playlistUrl: playlistUrl.trim() });
  };

  const handleToggleTrack = (index: number) => {
    const newSelected = new Set(selectedIndices);
    if (newSelected.has(index)) {
      newSelected.delete(index);
    } else {
      newSelected.add(index);
    }
    setSelectedIndices(newSelected);
  };

  const handleToggleAll = () => {
    if (selectedIndices.size === tracks.length) {
      setSelectedIndices(new Set());
    } else {
      setSelectedIndices(new Set(tracks.map((_, i) => i)));
    }
  };

  const handleImport = () => {
    const selectedTracks = tracks.filter((_, i) => selectedIndices.has(i));
    onImport(selectedTracks);
    onClose();
  };

  const handleCancel = () => {
    onClose();
  };

  const handleBack = () => {
    setStep("input");
    setError("");
  };

  const handleSpotifyConnect = () => {
    void signIn("spotify");
  };

  const handlePlaylistSelect = (playlistId: string) => {
    getUserPlaylistTracksMutation.mutate({ playlistId });
  };

  const handleSearch = async () => {
    if (!searchQuery.trim()) {
      setError("検索キーワードを入力してください");
      return;
    }
    setError("");
    const result = await searchMutation.refetch();
    if (result.data) {
      setSearchResults(result.data);
    }
  };

  const handleSearchTrackSelect = (tracks: Track[]) => {
    setTracks(tracks);
    setSelectedIndices(new Set(tracks.map((_, i) => i)));
    setStep("select");
  };

  const handleAlbumSelect = (albumId: string) => {
    getAlbumTracksMutation.mutate({ albumId });
  };

  const handleSearchPlaylistSelect = (playlistId: string) => {
    getUserPlaylistTracksMutation.mutate({ playlistId });
  };

  return (
    <Modal isOpen={isOpen} size="xl" className="max-w-2xl p-5">
      <div className="mt-3">
        <div className="flex items-center gap-3">
          <div className="flex h-10 w-10 flex-shrink-0 items-center justify-center rounded-full bg-green-100">
            <SpotifyIcon className="h-6 w-6 text-green-600" />
          </div>
          <h3 className="text-lg font-medium text-gray-900">
            Spotifyプレイリストからインポート
          </h3>
        </div>

        {step === "input" ? (
          <form onSubmit={handleFetchTracks} className="mt-4">
            <div className="mb-4">
              <label
                htmlFor="playlistUrl"
                className="block text-sm font-medium text-gray-700"
              >
                プレイリストURLまたはID
              </label>
              <input
                type="text"
                id="playlistUrl"
                value={playlistUrl}
                onChange={(e) => setPlaylistUrl(e.target.value)}
                className="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-blue-500 focus:ring-1 focus:ring-blue-500 focus:outline-none"
                placeholder="https://open.spotify.com/playlist/..."
                autoFocus
                disabled={getPlaylistTracksMutation.isPending}
              />
              <p className="mt-1 text-xs text-gray-500">
                Spotifyプレイリストのリンク、またはプレイリストIDを入力してください
              </p>
            </div>

            {error && (
              <div className="mb-4 rounded-md bg-red-50 p-3 text-sm text-red-600">
                {error}
              </div>
            )}

            <div className="mt-6 flex justify-end gap-3">
              <button
                type="button"
                onClick={handleCancel}
                disabled={getPlaylistTracksMutation.isPending}
                className="cursor-pointer rounded-lg border border-gray-300 bg-white px-4 py-2 text-sm text-gray-700 transition-colors hover:bg-gray-50 disabled:cursor-not-allowed disabled:opacity-50"
              >
                キャンセル
              </button>
              <button
                type="submit"
                disabled={
                  !playlistUrl.trim() || getPlaylistTracksMutation.isPending
                }
                className="cursor-pointer rounded-lg bg-green-600 px-4 py-2 text-sm font-medium text-white transition-colors hover:bg-green-700 disabled:cursor-not-allowed disabled:opacity-50"
              >
                {getPlaylistTracksMutation.isPending
                  ? "取得中..."
                  : "楽曲を取得"}
              </button>
            </div>
          </form>
        ) : (
          <div className="mt-4">
            <div className="mb-4 flex items-center justify-between">
              <p className="text-sm text-gray-600">
                {tracks.length}曲中 {selectedIndices.size}曲を選択
              </p>
              <button
                type="button"
                onClick={handleToggleAll}
                className="cursor-pointer text-sm text-blue-600 hover:text-blue-700"
              >
                {selectedIndices.size === tracks.length
                  ? "すべて解除"
                  : "すべて選択"}
              </button>
            </div>

            {error && (
              <div className="mb-4 rounded-md bg-red-50 p-3 text-sm text-red-600">
                {error}
              </div>
            )}

            <div className="mb-4 max-h-96 overflow-y-auto rounded-md border border-gray-200">
              {tracks.map((track, index) => (
                <label
                  key={index}
                  className="flex cursor-pointer items-center gap-3 border-b border-gray-200 px-4 py-3 last:border-b-0 hover:bg-gray-50"
                >
                  <input
                    type="checkbox"
                    checked={selectedIndices.has(index)}
                    onChange={() => handleToggleTrack(index)}
                    className="h-4 w-4 cursor-pointer rounded border-gray-300 text-green-600 focus:ring-green-500"
                  />
                  <div className="min-w-0 flex-1">
                    <p className="truncate text-sm font-medium text-gray-900">
                      {track.title}
                    </p>
                    <p className="truncate text-xs text-gray-500">
                      {track.artist}
                    </p>
                  </div>
                </label>
              ))}
            </div>

            <div className="mt-6 flex justify-between gap-3">
              <button
                type="button"
                onClick={handleBack}
                className="cursor-pointer rounded-lg border border-gray-300 bg-white px-4 py-2 text-sm text-gray-700 transition-colors hover:bg-gray-50"
              >
                戻る
              </button>
              <div className="flex gap-3">
                <button
                  type="button"
                  onClick={handleCancel}
                  className="cursor-pointer rounded-lg border border-gray-300 bg-white px-4 py-2 text-sm text-gray-700 transition-colors hover:bg-gray-50"
                >
                  キャンセル
                </button>
                <button
                  type="button"
                  onClick={handleImport}
                  disabled={selectedIndices.size === 0}
                  className="cursor-pointer rounded-lg bg-green-600 px-4 py-2 text-sm font-medium text-white transition-colors hover:bg-green-700 disabled:cursor-not-allowed disabled:opacity-50"
                >
                  {selectedIndices.size}曲をインポート
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </Modal>
  );
};
