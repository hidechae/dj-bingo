// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_DATABASE_URL")
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String  @map("user_id")
    type                     String
    provider                 String
    providerAccountId        String  @map("provider_account_id")
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model User {
    id            String      @id @default(cuid())
    name          String?
    email         String?     @unique
    emailVerified DateTime?   @map("email_verified")
    image         String?
    password      String?     // For email/password authentication
    accounts      Account[]
    sessions      Session[]
    bingoGames    BingoGame[]
    gameAdmins    GameAdmin[]

    @@map("users")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verification_tokens")
}

enum BingoSize {
    THREE_BY_THREE @map("3x3")
    FOUR_BY_FOUR   @map("4x4")
    FIVE_BY_FIVE   @map("5x5")
}

enum GameStatus {
    EDITING  @map("editing")  // 編集中
    ENTRY    @map("entry")    // エントリー中
    PLAYING  @map("playing")  // ゲーム中
    FINISHED @map("finished") // 終了
}

model BingoGame {
    id           String        @id @default(cuid())
    title        String
    size         BingoSize
    status       GameStatus    @default(EDITING)
    createdAt    DateTime      @default(now()) @map("created_at")
    updatedAt    DateTime      @updatedAt @map("updated_at")
    createdBy    String        @map("created_by")
    user         User          @relation(fields: [createdBy], references: [id])
    songs        Song[]
    participants Participant[]
    isActive     Boolean       @default(true) @map("is_active")
    gameAdmins   GameAdmin[]

    @@map("bingo_games")
}

model Song {
    id               String            @id @default(cuid())
    title            String
    artist           String?
    bingoGameId      String            @map("bingo_game_id")
    bingoGame        BingoGame         @relation(fields: [bingoGameId], references: [id], onDelete: Cascade)
    isPlayed         Boolean           @default(false) @map("is_played")
    playedAt         DateTime?         @map("played_at")
    participantSongs ParticipantSong[]

    @@map("songs")
}

model Participant {
    id               String            @id @default(cuid())
    name             String
    sessionToken     String            @map("session_token")
    bingoGameId      String            @map("bingo_game_id")
    bingoGame        BingoGame         @relation(fields: [bingoGameId], references: [id], onDelete: Cascade)
    createdAt        DateTime          @default(now()) @map("created_at")
    isGridComplete   Boolean           @default(false) @map("is_grid_complete")
    hasWon           Boolean           @default(false) @map("has_won")
    wonAt            DateTime?         @map("won_at")
    participantSongs ParticipantSong[]

    @@unique([sessionToken, bingoGameId])
    @@map("participants")
}

model ParticipantSong {
    id            String      @id @default(cuid())
    participantId String      @map("participant_id")
    participant   Participant @relation(fields: [participantId], references: [id], onDelete: Cascade)
    songId        String      @map("song_id")
    song          Song        @relation(fields: [songId], references: [id], onDelete: Cascade)
    position      Int // Position in bingo grid (0-8 for 3x3, 0-15 for 4x4, 0-24 for 5x5)

    @@unique([participantId, position])
    @@map("participant_songs")
}

model GameAdmin {
    id          String    @id @default(cuid())
    bingoGameId String    @map("bingo_game_id")
    bingoGame   BingoGame @relation(fields: [bingoGameId], references: [id], onDelete: Cascade)
    userId      String    @map("user_id")
    user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    addedBy     String    @map("added_by") // ID of the user who added this admin
    addedAt     DateTime  @default(now()) @map("added_at")

    @@unique([bingoGameId, userId])
    @@map("game_admins")
}
